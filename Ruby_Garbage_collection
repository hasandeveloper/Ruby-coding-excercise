If your working in ruby, For you memory is infinite it means you dont need to free space once your obejct is created in memory manually, Lets see how ruby garbage collections works for you.

Before Diving into Ruby GC, I want to explain about how in C cleanup manually should do yourself, In c if your writing code you have to free the memory space manually that is called low level language(which is near to your machine) Even if your writing code you have to think and write about cleaning the memory once the object is allocated, But in ruby dont need to cleanup up memory ruby itself will do this job for you.

Different Ruby implementations
There are a number of implementations of Ruby. Three popular ones are: MRI (Matz's Ruby Interpreter), Rubinius and JRuby. Different Ruby implementations use different methods of GC. In this article we'll focus on MRI, which is what most Ruby developers use.

RUBY'S HEAP
A computer has two types of memory: Stack and Heap. The stack is very fast and is local to the context of a function call. This means that every variable that is declared in the stack is immediately freed once the function is done. The stack is very limited in size, so you cannot store larger objects that contain an image or file's data, for example.

This is a bad fit for storing Ruby objects. These objects very often stick around for longer than a method call. Also, it's almost impossible to predict whether an object will be too big for the stack.

Therefore Ruby uses the other type of memory: the heap. On the heap a program can claim some memory and is then responsible for cleanup once it's done with that memory. Ruby uses this by claiming a single slab of memory to use to store Ruby objects. This is referred to as Ruby's heap.

Stack summary =>

Stack memory	Very fast
Used memory is freed automatically when the function call ends
Very limited in size

Heap Summary =>

Heap memory	Slightly slower than stack
No automatic cleanup
Size is only limited by the available memory of the computer


So Ruby objects are always allocated on Ruby's heap. If they're smaller than 40 bytes their content can be directly embedded in the object. Otherwise the object points to a separate segment of memory on Ruby's heap. So your Ruby object is often stored in two completely different locations in memory. Once Ruby's heap is full it will create a new heap, which is used for new objects.

Mark and Sweep

MRI uses a GC algorithm called Mark and Sweep. This operates by first doing a mark phase. In the mark phase the Garbage Collector scans all currently existing objects and sets a marked flag on every object it believes can be cleaned up.


The mark phase halts the execution of your code. The reason for this is that the Garbage Collector has to understand all the relationships between objects that exist. If the program would be running during the mark process things might change in the meantime and the Garbage Collector wouldn't be sure what the current state of an object is.

Secondly the sweep phase starts. This runs in the background on Ruby 1.9 and up. The Garbage Collector quietly frees every object that was marked in the mark phase. The memory is only available again after the sweep.

Since the mark phase halts the execution of your code, this is where problems in production can occur. The sweep phase is relatively benign.


Mark summary =>

Mark phase	Scans existing objects
Sets mark flag if object can be cleaned
Halts code execution

Sweep Summary =>

Sweep phase	Runs in the background
Cleans up marked objects
Memory available again after sweep is competed


Here is the below memory structure

 -----------------
   Kernal space    => uses by OS and programs
 -----------------
       stack       => uses by c compiler (Memory managed by compiler)

     userspace
 
       heap        => uses by ruby (Memory managed by programmer)
 -----------------


 Reference

 https://www.cloudbees.com/blog/visualizing-garbage-collection-ruby-python/

  https://www.reddit.com/r/ruby/comments/9etwak/insane_memory_usage_of_ruby_compared_to_python/

 Recursion in ruby 

 Recursion uses the internal stack to store your dicision points 
 
 The concept of Recursion solves many problems and makes the process easier as when calculating through Iterative process. Thus, if a person masters the concept of Recursion, one could solve many problems in lesser time and lesser lines of code. However, Recursion in Ruby sometimes produces “SystemStackError: stack level too deep” when a large number is used as an input(This number varies with the system). This means that we would have to use iterative approach to a problem involving large inputs.

  Stack is a container of objects that are inserted and removed according to the last-in first-out (LIFO) principle. Queue is a container of objects (a linear collection) that are inserted and removed according to the first-in first-out (FIFO) principle

 Which is better recursion or iterative
 
 https://stackoverflow.com/questions/15346774/are-recursive-methods-always-better-than-iterative-methods-in-java#:~:text=The%20fact%20is%20that%20recursion,so%20heavily%20used%20during%20recursion.


                                  Before moving to recursion do backtracing of fuctions

def bar(a)
    c = 15
    a = a + c      
    p a             20
    return a       
end

def foo(a)
    c = 5
    a = a + c     
    a = bar(c)     
    p a            20
    return a
end

def main 
    a = 10
    p a            10
    a = foo(a)     
    return 0
end

main()

# #  o/p
# 10 main
# 20 bar
# 20 foo  


#Here as soon as main function is calling to foo and foo calling to bar in stack frame, In stack(c)/heap(ruby)  frame will be created as soon as main function called. once frame created to main, predefined space will be created to store variable which is present in main and also you can obeserve in main function a = foo() here before foo get called after this calling function whatever lines are there even those lines will be stored in stack/heap memory and then for foo another frame will be create same will be happen for foo how happend for main.

# But once you return in any function those functions will be deleted in the stack/heap memory

#  For the Above functions Stack/heap Frame visualization
# |----------------------------|
# |           bar              |
# |           c = 15           |   
# |           a = a + c        |   // 15
# |           p a              |   // print second 20         As soon as do function return the frame will be deleted              
# |                            |   
# |----------------------------|
# |           foo              |
# |           c = 5            |   
# |           a = a + c        |   // 15
# |           a = bar(c)       |   // print third 20                      
# |           p a              |   
# |----------------------------|   
# |           main             |   
# |          a = 10            |   
# |          p a               |   // print first 10
# |          a = foo(a)        |   //20
# |----------------------------|


                                    Recusion works based on 3 principles
1.Base condition/terminating condition
2.processing
3.return                                    



def work_hard a
    if a == 0
        return 
    end

    work_hard(a -= 1)
    p a

    return a
end

work_hard 5
                    # |      if 0 == 0             |   
# work_hard(0)      # |         return             |   
                    # |      end                   | 
                    # |                            |
                    # |                            |
                    # |                            |
                    # |                            |
                    # |                            | 
                    # |                            |   
                    # |----------------------------|
                    # |      if 1 == 0             |   
# work_hard(1)      # |         return 0           |   
                    # |      end                   | 
                    # |                            |
                    # |       work_hard(1 -= 1)    |
                    # |       p 0                  |
                    # |                            |
                    # |       return 0             | 
                    # |                            |   
                    # |----------------------------|
                    # |      if  2 == 0            |   
# work_hard(2)      # |         return 0           |   
                    # |      end                   | 
                    # |                            |
                    # |       work_hard(2 -= 1)    |
                    # |       p 1                  |
                    # |                            |
                    # |       return 1             | 
                    # |                            |   
                    # |----------------------------|
                    # |      if 3 == 0             |   
# work_hard(3)      # |         return 0           |   
                    # |      end                   | 
                    # |                            |
                    # |       work_hard(3 -= 1)    |
                    # |       p 2                  |
                    # |                            |
                    # |       return 2             | 
                    # |                            |   
                    # |----------------------------|
                    # |      if 4 == 0             |   
# work_hard(4)      # |         return 0           |   
                    # |      end                   | 
                    # |                            |
                    # |       work_hard(4 -= 1)    |
                    # |       p 3                  |
                    # |                            |
                    # |       return 3             | 
                    # |                            |     
                    # |----------------------------|   
                    # |      if 5 == 0             |   
# work_hard(5)      # |         return 0           |   
                    # |      end                   | 
                    # |                            |
                    # |       work_hard(5 -= 1)    |
                    # |       p 4                  |
                    # |                            |
                    # |       return 4             | 
                    # |                            |   
                    # |----------------------------|

# For the above we took 5 internal space in the heap/stack


https://stackoverflow.com/questions/5006395/does-ruby-have-containers-like-stacks-queues-linked-lists-maps-or-sets≈